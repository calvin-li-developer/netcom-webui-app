# create a docker build pipeline
name: web multi job pipeline

on:
    push:
        branches:
            - "dev1"

jobs:
    sast:
        runs-on: self-hosted
        steps:
          - name: Checkout repository
            uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 #v4.1.6
          
          - name: SonarQube Scan
            run: |
              sonar-scanner.bat -D"sonar.projectKey=calvinli-python-project" -D"sonar.sources=." -D"sonar.host.url=${{ secrets.SONAR_HOST_URL }}" -D"sonar.token=${{ secrets.SONAR_TOKEN }}"
          
          - name: Upload Artifact
            uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 #v4.3.3
            with:
              name: sonarqube_artifact
              path: |
                Dockerfile
                compose.yaml
                html/
                !**/.git*
                !**/*.md
              retention-days: 5

    build:
        runs-on: ubuntu-latest
        needs: sast
        steps:
          - name: Download sonarqube artifact from sast
            uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e #v4.1.7
            with:
              name: sonarqube_artifact

          - name: Use docker compose to build
            run: |
              docker compose up -d
              docker compose ps
          
          - name: Health check of running web container
            run: |
              (curl -sSf --retry 3 --retry-all-errors localhost:1234/health.html > /dev/null && echo "SUCCESS: STATUS 200") || (echo "FAILURE: STATUS 404" && exit 1)
          
          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 #v4.0.2
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: us-east-1
      
          - name: Build, tag, and push docker image to Amazon ECR
            env:
              REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              REPOSITORY: bmo-webui-app
              IMAGE_TAG: calvin-v${{ github.sha }}
            run: |
              docker image ls
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 751136288263.dkr.ecr.us-east-1.amazonaws.com
              docker tag netcomwebuiapp:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$REPOSITORY:$IMAGE_TAG
              docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/$REPOSITORY:$IMAGE_TAG
